"""
–í–∞—Ä–∏–∞–Ω—Ç ‚Ññ39: –°–ø–∏—Å–æ–∫ ¬´–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∞¬ª

–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:  ***** Already done ******
- –ù–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏);
- –î–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥—ã (–≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ, –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ, —à–∞–≥ –≤–ø–µ—Ä—ë–¥, –ø—Ä—ã–∂–æ–∫ –∏ —Ç.–¥.);
- –ü–æ–ª–µ –∏–≥—Ä—ã (–¥–≤—É–º–µ—Ä–Ω—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤, –∫–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äì –∫–ª–µ—Ç–∫–∞ –Ω–∞ –ø–æ–ª–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å –∑–∞–¥–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –∏–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º, –∞ —Ç–∞–∫–∂–µ —Ñ–∏–Ω–∏—à–µ–º. 
–ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞);
- –†–æ–±–æ—Ç (–º–∞—Å—Å–∏–≤ –∏–∑ —Ç—Ä—ë—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ‚Äì –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è);
- –°—á—ë—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è;  +
- –†—É—á–Ω–∞—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–º–∞–∫—Å. 10—Ö10);  +
- –°–ª—É—á–∞–π–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏);  +
- –í—ã–≤–æ–¥ –ø–æ–ª—è –∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ —ç–∫—Ä–∞–Ω;  +
- –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ä–æ–±–æ—Ç–æ–º.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
- –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã (–ø–æ–ª–µ –∏–∑ —Ñ–∞–π–ª–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ);  +
- –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–ª—è –≤ —Ñ–∞–π–ª;
- –ù–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π ¬´–ø—Ä–æ–≥—Ä–∞–º–º—ã¬ª –∏ ¬´—Ñ—É–Ω–∫—Ü–∏–π¬ª (–æ—Ç 1 –¥–æ 3);
- –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ¬´–ø—Ä–æ–≥—Ä–∞–º–º—ã¬ª —Ä–æ–±–æ—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥;
- –ó–∞–º–µ–Ω–∞, –≤—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥—ã –º–µ–∂–¥—É –¥–≤—É–º—è –¥—Ä—É–≥–∏–º–∏;
- –í—ã–≤–æ–¥ –ø–æ–ª—è –∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ —ç–∫—Ä–∞–Ω;  +
- –ó–∞–ø—É—Å–∫ ¬´–ø—Ä–æ–≥—Ä–∞–º–º—ã¬ª.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ:
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ –≤–∏–¥–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä—É—á–Ω—É—é —Å–ø–∏—Å–∫–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π ¬´–ø—Ä–æ–≥—Ä–∞–º–º—ã¬ª –∏ –∫–∞–∂–¥–æ–π ¬´—Ñ—É–Ω–∫—Ü–∏–∏¬ª);
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;  +
- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –∫–æ–Ω—Å—Ç. –º–µ—Ç–æ–¥—ã, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ [];
- –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Å–µ–≤–¥–æ–≥—Ä–∞—Ñ–∏–∫–æ–π (–ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ç–∞–±–ª–∏—Ü—ã ASCII);  +

–ü–æ—è—Å–Ω–µ–Ω–∏—è:
–ï—Å—Ç—å –ø–æ–ª–µ, –∫–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–º–µ–µ—Ç –∑–∞–¥–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É. –ù–∞ –ø–æ–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–æ–±–æ—Ç, —Ä–∞–∑–º–µ—Ä–æ–º –≤ –æ–¥–Ω—É —è—á–µ–π–∫—É. 
–û–Ω –º–æ–∂–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ —è—á–µ–π–∫–∞–º, –Ω–∞—Ö–æ–¥—è—â–∏–º—Å—è –Ω–∞ –æ–¥–Ω–æ–º —Å –Ω–∏–º —É—Ä–æ–≤–Ω–µ –∏ –ø—Ä—ã–≥–∞—Ç—å –Ω–∞ —è—á–µ–π–∫–∏, —Å —É—Ä–æ–≤–Ω–µ–º –æ—Ç–ª–∏—á–∞—é—â–∏–º—Å—è –Ω–∞ –æ–¥–∏–Ω (–≤ –ª—é–±—É—é —Å—Ç–æ—Ä–æ–Ω—É). 
–†–∞–∑–Ω–∏—Ü–∞ –≤ –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω–µ–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º—ã–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä —Ä–∞–∑—Ä—É—à–∞–µ–º—ã–µ). 
–ö–∞–∂–¥—ã–π —à–∞–≥ –∏–ª–∏ –ø—Ä—ã–∂–æ–∫ —Ä–æ–±–æ—Ç–∞ –ø–µ—Ä–µ–º–µ—à–∞–µ—Ç –µ–≥–æ –Ω–∞ –æ–¥–Ω—É —è—á–µ–π–∫—É, –∞ –ø–æ–≤–æ—Ä–æ—Ç—ã ‚Äì –Ω–µ—Ç. –ú–æ–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä —É–¥–∞—Ä—ã –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏).
–¶–µ–ª—å —Ä–æ–±–æ—Ç–∞ –¥–æ—Å—Ç–∏—á—å —Ñ–∏–Ω–∏—à–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –Ω–∞ –ø–æ–ª–µ. 
–¶–µ–ª—å –∏–≥—Ä–æ–∫–∞, –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å ¬´–ø—Ä–æ–≥—Ä–∞–º–º—É¬ª, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–≤–µ–¥—ë—Ç —Ä–æ–±–æ—Ç–∞ –¥–æ —Ñ–∏–Ω–∏—à–∞. 
–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Ç–æ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–µ –≤ –º–æ–º–µ–Ω—Ç –∏—Ö –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–º, –∞ –ª–∏—à—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –∏ –∏–≥—Ä–æ–∫ –Ω–∞–∂–º—ë—Ç ¬´—Å—Ç–∞—Ä—Ç¬ª.

"""
import os
import random
import time
import random
from colorama import init, Fore, Back, Style

init(autoreset=True)

"""
‚ñà - wall (height - 3)
‚â° - barrier (height - 2)
¬© - robot (height - 1)
‚ñë - floor (height - 0)
"""

"""
Commands(emoji): 
turn left - üëà
turn right - üëâ
walk - ?
jump - ?

"""


# print(Style.BRIGHT + Back.RED + "‚ñà", end='')
# print('‚â°', end='')
# print(Style.BRIGHT + Back.RED + "‚ñà")
# print(Style.BRIGHT + Back.RED + "‚ñà", end='')
# print('¬©', end='')
# print(Style.BRIGHT + Back.RED + "‚ñà")


'''
 12345678901234567890123
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚â°‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà 1
‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà 2
‚ñà   ‚ñë¬©‚ñë  ‚â°    ‚â°         ‚ñà 3
‚ñà   ‚â°      ‚ñà      ‚ñà     ‚ñà 4
‚ñà            ‚â°      ‚â°   ‚ñà 5
‚ñà      ‚ñà ‚â°  ‚ñà    ‚ñà      ‚ñà 6
‚ñà    ‚ñà       ‚â°      ‚â°   ‚ñà 7
‚ñà         ‚ñà       ‚ñà     F 8
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
'''


class GameField:
    wall = ("‚ñà", 3)
    barrier = ("‚â°", 2)
    floor = ("‚ñë", 0)

    def __init__(self, width, height=None):
        # Add 2 for making borders
        self.width = width + 2
        if height is None:
            self.height = width//3 + 2
        else:
            self.height = height + 2
        self.field = []

    def create_field(self):
        for i in range(self.height):
            self.field.append([])
            for j in range(self.width):
                # Add walls around the field
                if i == 0 or i == self.height-1 or j == 0 or j == self.width-1:
                    self.field[i].append(self.wall)
                else:
                    # Add wall, barrier or ordinary floor in field
                    # If random_number is 0 then add barrier else if 1 add wall else floor
                    random_number = random.randint(0, 5)
                    if random_number == 0:
                        self.field[i].append(self.barrier)
                    elif random_number == 1:
                        self.field[i].append(self.wall)
                    else:
                        self.field[i].append(self.floor)

    def print_field(self, robot_position=None):
        print(' ', end='')
        # Print numbers at the top of the field
        for number in range(1, self.width-1):  # -1 Because we had to add 2 positions for the borders.
            print(str(number)[-1], end='')
        print('')
        for index, row in enumerate(self.field):
            for cell in row:
                match cell:
                    case self.wall:
                        print(Style.BRIGHT + Fore.CYAN + cell[0], end='')
                    case self.barrier:
                        print(Style.BRIGHT + Fore.RED + cell[0], end='')
                    case self.floor:
                        print(cell[0], end='')
            # Print numbers at the right of the field
            if index != 0 and index != self.height-1:
                print(str(index)[-1], end='')
            print('')

    def save_field(self):
        with open('field.txt', 'w') as file:
            for index, row in enumerate(self.field):
                for cell in row:
                    file.write(str(cell[1]))
                file.write('\n')

    def upload_field(self, filename):
        with open(filename, 'r') as file:
            for i in range(self.height):
                self.field.append([])
                for j in range(self.width+1):  # Width+1 because in file one more than in field (last symbol \n)
                    # Add walls around the field
                    cell = file.read(1)
                    match cell:
                        case '0':
                            self.field[i].append(self.floor)
                        case '2':
                            self.field[i].append(self.barrier)
                        case '3':
                            self.field[i].append(self.wall)


class RobotCommand:
    game_field = GameField(20)
    commands_counter = 0
    next_command_id = 0

    def __init__(self, move, amount_of_steps=None):
        self.command_id = RobotCommand.next_command_id
        self.move = move  # turn_right, turn_left, turn_bottom, turn_top, step, jump
        self.robot = [0, 0, 'bottom']  # Get from previous command
        match self.move:
            case 'turn_right':
                self.robot[2] = 'right'
            case 'turn_left':
                self.robot[2] = 'left'
            case 'turn_bottom':
                self.robot[2] = 'bottom'
            case 'turn_top':
                self.robot[2] = 'top'
            case 'step':
                match self.robot[2]:
                    case 'right':
                        self.robot[0] += amount_of_steps
                    case 'left':
                        self.robot[0] -= amount_of_steps
                    case 'bottom':
                        self.robot[1] -= amount_of_steps
                    case 'top':
                        self.robot[1] += amount_of_steps
            case 'jump':
                match self.robot[2]:
                    case 'right':
                        self.robot[0] += 1
                    case 'left':
                        self.robot[0] -= 1
                    case 'bottom':
                        self.robot[1] -= 1
                    case 'top':
                        self.robot[1] += 1
        self.prev_command = None
        self.next_command = None
        RobotCommand.commands_counter += 1
        RobotCommand.next_command_id += 1


# TODO: ASK
# –ö–∞–∫ —è –ø–æ–Ω—è–ª –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥, –≤–µ—Ä–Ω–æ ???

# –ú–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å 3 –∫–ª–∞—Å—Å–∞, –æ–¥–∏–Ω –¥–ª—è –ø–æ–ª—è –∏–≥—Ä—ã, –≤—Ç–æ—Ä–æ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞,
# –∞ —Ç—Ä–µ—Ç–∏–π –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä —ç—Ç–æ–≥–æ —Å–∞–º–æ–≥–æ —Å–ø–∏—Å–∫–∞

# –ù–∞ –∑–∞—â–∏—Ç–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ(python venv) –∏ –µ—Å–ª–∏ –¥–∞,
# —Ç–æ –∫–∞–∫–æ–π —Ç–∞–º –ø–∏—Ç–æ–Ω –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å(—è —é–∑–∞—é match –≤ –∫–æ–¥–µ)

# –ö–æ–≥–¥–∞ —é–∑–µ—Ä –¥–∞—ë—Ç —Ä–æ–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É –∏–¥—Ç–∏, —Ç–æ —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —à–∞–≥
# –∏–ª–∏ –º–æ–∂–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É —é–∑–µ—Ä–∞ —Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –æ–Ω –∂–µ–ª–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å

# –í –∑–∞–¥–∞–Ω–∏–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ "–†—É—á–Ω–∞—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–º–∞–∫—Å. 10—Ö10);"
# –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 10—Ö10, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –æ—á–µ–Ω—å –º–∞–ª–æ ???

# –í –∑–∞–¥–∞–Ω–∏–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ "–ù–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π ¬´–ø—Ä–æ–≥—Ä–∞–º–º—ã¬ª –∏ ¬´—Ñ—É–Ω–∫—Ü–∏–π¬ª (–æ—Ç 1 –¥–æ 3);"
# –ö–∞–∫ —è –ø–æ–Ω—è–ª "–ø—Ä–æ–≥—Ä–∞–º–º–∞" —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–æ–±–æ—Ç–∞
# –¢–æ–≥–¥–∞ —á—Ç–æ —Ç–∞–∫–æ–µ "—Ñ—É–Ω–∫—Ü–∏–∏", –Ω–µ –¥—É–º–∞—é —á—Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ–¥–µ

# –ü–æ—è—Å–Ω–∏—Ç—å "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ –≤–∏–¥–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä—É—á–Ω—É—é —Å–ø–∏—Å–∫–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π ¬´–ø—Ä–æ–≥—Ä–∞–º–º—ã¬ª –∏ –∫–∞–∂–¥–æ–π ¬´—Ñ—É–Ω–∫—Ü–∏–∏¬ª)"
# –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è "—Ñ—É–Ω–∫—Ü–∏–π" ???

# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ —ç—Ç–æ –ø—Ä—è –∂–µ—Å—Ç–∫–∏–µ, –∂–µ—Å—Ç–∫–∏–µ –∏–ª–∏ –º–æ–∂–Ω–æ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤ –ø—É–Ω–∫—Ç–∞ –Ω–µ –¥–µ–ª–∞—Ç—å.
# –°–º—É—â–∞–µ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ [], –æ–Ω–∞ —Ç—É—Ç –º–Ω–µ –ø–æ —Å—É—Ç–∏ –Ω–µ —Å–∏–ª—å–Ω–æ –∏ –Ω—É–∂–Ω–∞

# –ò –≤–æ–∑–º–æ–∂–µ–Ω –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–Ω–µ—Å—Ç–∏ –∫–∞–∫–∏–µ-—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã(P.S. —á–∏—Å—Ç–æ –Ω–∞ –±—É–¥—É—â–µ–µ)

# –ü—Ä–∏ –∫–æ–º–∞–Ω–¥–µ –ø—Ä—ã–∂–æ–∫, —Ä–æ–±–æ—Ç –∑–∞–ø—Ä—ã–≥–∏–≤–∞–µ—Ç –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ—Ç –µ–≥–æ ???


def main():
    field_from_file = False
    while True:
        # In multi string are added unnecessary spaces
        menu = ("0 - Auto set width and height of field\n"
                "1 - Random set width and height of field(starts from 25 cells)\n"
                "2 - User set width and height of field\n"
                "3 - Select from file\n")
        print(menu)

        select_field_settings = input("Select(default - 0): ")
        if select_field_settings == '0':
            game_field = GameField(30)
            break
        elif select_field_settings == '1':
            random_width = random.randint(25, 50)
            game_field = GameField(random_width)
            break
        elif select_field_settings == '2':
            width = int(input("Field width: "))
            height = int(input("Field height: "))
            if width > 20 and height > 10:
                game_field = GameField(width, height)
                break
            else:
                os.system('clear')  # cls
                print("Error. Width and height must be more than 20")
                continue
        elif select_field_settings == '3':
            field_from_file = True
            # TODO: select from file
            # TODO: if field bigger then in file will bad result, so need take width and height of field from file(save in json???)
            pass
        elif select_field_settings == '':
            game_field = GameField(30)
            break
        else:
            os.system('clear')  # cls
            print("Error. There is no this variant")
            continue
    game_field.create_field()
    RobotCommand.game_field = game_field
    os.system('clear')  # cls
    print("Your game field: ")
    game_field.print_field()
    time.sleep(5)
    os.system('clear')  # cls

    if not field_from_file:
        while True:
            save_field = input("If do you want save this field type 'yes'(default - no):  ")
            if save_field == "yes":
                # TODO: Save this field
                pass
            else:
                pass
            break

    while True:
        # TODO: Create commands
        break

    # TODO: Print for user field and commands which will be launched ???
    # TODO: Menu: change command in list, add to list, remove from list

    # game_field.upload_field()
    # game_field.print_field()

    # TODO: THINK HOW AND ADD FINISH TO FIELD

    # TODO: need bidirectional linked list ???
    # r1 = RobotCommand('step', 2)
    # r2 = RobotCommand('turn_right')
    # print(r1.__dict__)
    # print(r2.__dict__)
    # print(RobotCommand.commands_counter)
    # game_field.save_field()


if __name__ == "__main__":
    main()
