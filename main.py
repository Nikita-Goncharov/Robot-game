"""
–í–∞—Ä–∏–∞–Ω—Ç ‚Ññ39: –°–ø–∏—Å–æ–∫ ¬´–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∞¬ª

–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:  ***** Already done ******
- –ù–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏);
- –î–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥—ã (–≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ, –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ, —à–∞–≥ –≤–ø–µ—Ä—ë–¥, –ø—Ä—ã–∂–æ–∫ –∏ —Ç.–¥.);
- –ü–æ–ª–µ –∏–≥—Ä—ã (–¥–≤—É–º–µ—Ä–Ω—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤, –∫–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äì –∫–ª–µ—Ç–∫–∞ –Ω–∞ –ø–æ–ª–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å –∑–∞–¥–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –∏–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º, –∞ —Ç–∞–∫–∂–µ —Ñ–∏–Ω–∏—à–µ–º. 
–ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞);
- –†–æ–±–æ—Ç (–º–∞—Å—Å–∏–≤ –∏–∑ —Ç—Ä—ë—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ‚Äì –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è);
- –°—á—ë—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è;
- –†—É—á–Ω–∞—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–º–∞–∫—Å. 10—Ö10);
- –°–ª—É—á–∞–π–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏);
- –í—ã–≤–æ–¥ –ø–æ–ª—è –∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ —ç–∫—Ä–∞–Ω;
- –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ä–æ–±–æ—Ç–æ–º.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
- –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã (–ø–æ–ª–µ –∏–∑ —Ñ–∞–π–ª–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ);
- –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–ª—è –≤ —Ñ–∞–π–ª;
- –ù–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π ¬´–ø—Ä–æ–≥—Ä–∞–º–º—ã¬ª –∏ ¬´—Ñ—É–Ω–∫—Ü–∏–π¬ª (–æ—Ç 1 –¥–æ 3);
- –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ¬´–ø—Ä–æ–≥—Ä–∞–º–º—ã¬ª —Ä–æ–±–æ—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥;
- –ó–∞–º–µ–Ω–∞, –≤—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥—ã –º–µ–∂–¥—É –¥–≤—É–º—è –¥—Ä—É–≥–∏–º–∏;
- –í—ã–≤–æ–¥ –ø–æ–ª—è –∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ —ç–∫—Ä–∞–Ω;
- –ó–∞–ø—É—Å–∫ ¬´–ø—Ä–æ–≥—Ä–∞–º–º—ã¬ª.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ:
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ –≤–∏–¥–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä—É—á–Ω—É—é —Å–ø–∏—Å–∫–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π ¬´–ø—Ä–æ–≥—Ä–∞–º–º—ã¬ª –∏ –∫–∞–∂–¥–æ–π ¬´—Ñ—É–Ω–∫—Ü–∏–∏¬ª);
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –∫–æ–Ω—Å—Ç. –º–µ—Ç–æ–¥—ã, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ [];
- –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Å–µ–≤–¥–æ–≥—Ä–∞—Ñ–∏–∫–æ–π (–ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ç–∞–±–ª–∏—Ü—ã ASCII);

–ü–æ—è—Å–Ω–µ–Ω–∏—è:
–ï—Å—Ç—å –ø–æ–ª–µ, –∫–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–º–µ–µ—Ç –∑–∞–¥–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É. –ù–∞ –ø–æ–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–æ–±–æ—Ç, —Ä–∞–∑–º–µ—Ä–æ–º –≤ –æ–¥–Ω—É —è—á–µ–π–∫—É. 
–û–Ω –º–æ–∂–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ —è—á–µ–π–∫–∞–º, –Ω–∞—Ö–æ–¥—è—â–∏–º—Å—è –Ω–∞ –æ–¥–Ω–æ–º —Å –Ω–∏–º —É—Ä–æ–≤–Ω–µ –∏ –ø—Ä—ã–≥–∞—Ç—å –Ω–∞ —è—á–µ–π–∫–∏, —Å —É—Ä–æ–≤–Ω–µ–º –æ—Ç–ª–∏—á–∞—é—â–∏–º—Å—è –Ω–∞ –æ–¥–∏–Ω (–≤ –ª—é–±—É—é —Å—Ç–æ—Ä–æ–Ω—É). 
–†–∞–∑–Ω–∏—Ü–∞ –≤ –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω–µ–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–ø—Ä–µ–æ–¥–æ–ª–∏–º—ã–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä —Ä–∞–∑—Ä—É—à–∞–µ–º—ã–µ). 
–ö–∞–∂–¥—ã–π —à–∞–≥ –∏–ª–∏ –ø—Ä—ã–∂–æ–∫ —Ä–æ–±–æ—Ç–∞ –ø–µ—Ä–µ–º–µ—à–∞–µ—Ç –µ–≥–æ –Ω–∞ –æ–¥–Ω—É —è—á–µ–π–∫—É, –∞ –ø–æ–≤–æ—Ä–æ—Ç—ã ‚Äì –Ω–µ—Ç. –ú–æ–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä —É–¥–∞—Ä—ã –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏).
–¶–µ–ª—å —Ä–æ–±–æ—Ç–∞ –¥–æ—Å—Ç–∏—á—å —Ñ–∏–Ω–∏—à–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –Ω–∞ –ø–æ–ª–µ. 
–¶–µ–ª—å –∏–≥—Ä–æ–∫–∞, –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å ¬´–ø—Ä–æ–≥—Ä–∞–º–º—É¬ª, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–≤–µ–¥—ë—Ç —Ä–æ–±–æ—Ç–∞ –¥–æ —Ñ–∏–Ω–∏—à–∞. 
–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Ç–æ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–µ –≤ –º–æ–º–µ–Ω—Ç –∏—Ö –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–º, –∞ –ª–∏—à—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –∏ –∏–≥—Ä–æ–∫ –Ω–∞–∂–º—ë—Ç ¬´—Å—Ç–∞—Ä—Ç¬ª.

"""
import random
from colorama import init, Fore, Back, Style

init(autoreset=True)

"""
‚ñà - wall (height - 3)
‚â° - barrier (height - 2)
¬© - robot (height - 1)
‚ñë - floor (height - 0)
"""

"""
Commands(emoji): 
turn left - üëà
turn right - üëâ
walk - 
jump - 

"""


# print(Style.BRIGHT + Back.RED + "‚ñà", end='')
# print('‚â°', end='')
# print(Style.BRIGHT + Back.RED + "‚ñà")
# print(Style.BRIGHT + Back.RED + "‚ñà", end='')
# print('¬©', end='')
# print(Style.BRIGHT + Back.RED + "‚ñà")


'''
 12345678901234567890123
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚â°‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà 1
‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà 2
‚ñà   ‚ñë¬©‚ñë  ‚â°    ‚â°         ‚ñà 3
‚ñà   ‚â°      ‚ñà      ‚ñà     ‚ñà 4
‚ñà            ‚â°      ‚â°   ‚ñà 5
‚ñà      ‚ñà ‚â°  ‚ñà    ‚ñà      ‚ñà 6
‚ñà    ‚ñà       ‚â°      ‚â°   ‚ñà 7
‚ñà         ‚ñà       ‚ñà     F 8
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
'''


class GameField:
    wall = ("‚ñà", 3)
    barrier = ("‚â°", 2)
    floor = ("‚ñë", 0)

    def __init__(self, width, height=None):
        # Add 2 for making borders
        self.width = width + 2
        if height is None:
            self.height = width//3 + 2
        else:
            self.height = height + 2
        self.field = []

    def create_field(self):
        for i in range(self.height):
            self.field.append([])
            for j in range(self.width):
                # Add walls around the field
                if i == 0 or i == self.height-1 or j == 0 or j == self.width-1:
                    self.field[i].append(self.wall)
                else:
                    # Add wall, barrier or ordinary floor in field
                    # If random_number is 0 then add barrier else if 1 add wall else floor
                    random_number = random.randint(0, 5)
                    if random_number == 0:
                        self.field[i].append(self.barrier)
                    elif random_number == 1:
                        self.field[i].append(self.wall)
                    else:
                        self.field[i].append(self.floor)

    def print_field(self, robot_position=None):
        print(' ', end='')
        # Print numbers at the top of the field
        for number in range(1, self.width-1):  # -1 Because we had to add 2 positions for the borders.
            print(str(number)[-1], end='')
        print('')
        for index, row in enumerate(self.field):
            for cell in row:
                match cell:
                    case self.wall:
                        print(Style.BRIGHT + Fore.CYAN + cell[0], end='')
                    case self.barrier:
                        print(Style.BRIGHT + Fore.RED + cell[0], end='')
                    case self.floor:
                        print(cell[0], end='')
            # Print numbers at the right of the field
            if index != 0 and index != self.height-1:
                print(str(index)[-1], end='')
            print('')

    def save_field(self):
        with open('field.txt', 'w') as file:
            for index, row in enumerate(self.field):
                for cell in row:
                    file.write(str(cell[1]))
                file.write('\n')

    def upload_field(self):
        with open('field.txt', 'r') as file:
            for i in range(self.height):
                self.field.append([])
                for j in range(self.width+1):  # Width+1 because in file one more than in field (last symbol \n)
                    # Add walls around the field
                    cell = file.read(1)
                    print(cell, type(cell))
                    match cell:
                        case '0':
                            self.field[i].append(self.floor)
                        case '2':
                            self.field[i].append(self.barrier)
                        case '3':
                            self.field[i].append(self.wall)


class RobotCommand:
    game_field = GameField(20)
    commands_counter = 0
    next_command_id = 0

    def __init__(self, move, amount_of_steps=None):
        # TODO: make just one step command or can in one command do few steps
        self.command_id = RobotCommand.next_command_id
        self.move = move  # turn_right, turn_left, turn_bottom, turn_top, step, jump
        self.robot = [0, 0, 'bottom']
        match self.move:
            case 'turn_right':
                self.robot[2] = 'right'
            case 'turn_left':
                self.robot[2] = 'left'
            case 'turn_bottom':
                self.robot[2] = 'bottom'
            case 'turn_top':
                self.robot[2] = 'top'
            case 'step':
                match self.robot[2]:
                    case 'right':
                        self.robot[0] += amount_of_steps
                    case 'left':
                        self.robot[0] -= amount_of_steps
                    case 'bottom':
                        self.robot[1] -= amount_of_steps
                    case 'top':
                        self.robot[1] += amount_of_steps
            case 'jump':
                pass
        self.next_command = None
        RobotCommand.commands_counter += 1
        RobotCommand.next_command_id += 1


def main():
    game_field = GameField(20)
    # TODO: check if width gt 20
    # game_field.create_field()
    # TODO: if field bigger then in file will bad result, so need take width and height of field from file
    game_field.upload_field()
    game_field.print_field()
    RobotCommand.game_field = game_field
    # TODO: need bidirectional linked list ???
    r1 = RobotCommand('step', 2)
    r2 = RobotCommand('turn_right')
    print(r1.__dict__)
    print(r2.__dict__)
    print(RobotCommand.commands_counter)
    # game_field.save_field()


if __name__ == "__main__":
    main()
